/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'checkstyle'


repositories {
    mavenCentral()
}

def grpcVersion = '1.11.0'
def geodeVersion = '1.8.0'
def log4jVersion = '2.11.0'
def junitVersion = '4.12'
def mockitoVersion = '1.10.19'
def powermockVersion = '1.6.5'
def jsonVersion = '20180813'

dependencies {
    compile "org.apache.geode:geode-core:$geodeVersion"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.json:json:${jsonVersion}"
    compile "org.everit.json:org.everit.json.schema:1.5.1"
    compile files('libs/kvdb-1.0.jar')
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.powermock:powermock-api-mockito:${powermockVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powermockVersion}"
    testCompile "junit:junit:${junitVersion}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.11.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task DBProxyServer(type: CreateStartScripts) {
    mainClassName = 'ericsson.core.nrf.dbproxy.DBProxyServer'
    applicationName = 'db-proxy-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task DBProxyClient(type: CreateStartScripts) {
    mainClassName = 'ericsson.core.nrf.dbproxy.dbproxy_client.DBProxyClient'
    applicationName = 'db-proxy-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}


applicationDistribution.into('bin') {
    from(DBProxyServer)
    from(DBProxyClient)
    fileMode = 0755
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        //uncomment following line to see standard output in UT
        //events 'standard_out'
    }
    afterSuite { desc, result ->
        if (!desc.parent)
            println("\nUT RESULTS:\n   ${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }
}


jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}
checkstyle {
    ignoreFailures false
}
task checkstyle(type: Checkstyle) {
    description 'Runs Checkstyle inspection.'
    group = 'Code Quality'
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    showViolations true
    classpath = files()
    checkstyleMain.excludes = ['**/format.sh', 'build/generated/source/**', '**/DBProxyClient.java', '**/JSONUtil.java', '**/RequestBuilder.java']
    checkstyleMain.source  = 'src/main/java'
    checkstyleTest.exclude '*'
}

