// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nfmessage/nrfprofile/NRFProfileGetRequest.proto

package nrfprofile // import "com/dbproxy/nfmessage/nrfprofile"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NRFProfileGetRequest struct {
	// Types that are valid to be assigned to Data:
	//	*NRFProfileGetRequest_NrfInstanceId
	//	*NRFProfileGetRequest_Filter
	//	*NRFProfileGetRequest_FragmentSessionId
	Data                 isNRFProfileGetRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NRFProfileGetRequest) Reset()         { *m = NRFProfileGetRequest{} }
func (m *NRFProfileGetRequest) String() string { return proto.CompactTextString(m) }
func (*NRFProfileGetRequest) ProtoMessage()    {}
func (*NRFProfileGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_NRFProfileGetRequest_7fb819752d4d985f, []int{0}
}
func (m *NRFProfileGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NRFProfileGetRequest.Unmarshal(m, b)
}
func (m *NRFProfileGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NRFProfileGetRequest.Marshal(b, m, deterministic)
}
func (dst *NRFProfileGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NRFProfileGetRequest.Merge(dst, src)
}
func (m *NRFProfileGetRequest) XXX_Size() int {
	return xxx_messageInfo_NRFProfileGetRequest.Size(m)
}
func (m *NRFProfileGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NRFProfileGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NRFProfileGetRequest proto.InternalMessageInfo

type isNRFProfileGetRequest_Data interface {
	isNRFProfileGetRequest_Data()
}

type NRFProfileGetRequest_NrfInstanceId struct {
	NrfInstanceId string `protobuf:"bytes,1,opt,name=nrf_instance_id,json=nrfInstanceId,proto3,oneof"`
}

type NRFProfileGetRequest_Filter struct {
	Filter *NRFProfileFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

type NRFProfileGetRequest_FragmentSessionId struct {
	FragmentSessionId string `protobuf:"bytes,3,opt,name=fragment_session_id,json=fragmentSessionId,proto3,oneof"`
}

func (*NRFProfileGetRequest_NrfInstanceId) isNRFProfileGetRequest_Data() {}

func (*NRFProfileGetRequest_Filter) isNRFProfileGetRequest_Data() {}

func (*NRFProfileGetRequest_FragmentSessionId) isNRFProfileGetRequest_Data() {}

func (m *NRFProfileGetRequest) GetData() isNRFProfileGetRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NRFProfileGetRequest) GetNrfInstanceId() string {
	if x, ok := m.GetData().(*NRFProfileGetRequest_NrfInstanceId); ok {
		return x.NrfInstanceId
	}
	return ""
}

func (m *NRFProfileGetRequest) GetFilter() *NRFProfileFilter {
	if x, ok := m.GetData().(*NRFProfileGetRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

func (m *NRFProfileGetRequest) GetFragmentSessionId() string {
	if x, ok := m.GetData().(*NRFProfileGetRequest_FragmentSessionId); ok {
		return x.FragmentSessionId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NRFProfileGetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NRFProfileGetRequest_OneofMarshaler, _NRFProfileGetRequest_OneofUnmarshaler, _NRFProfileGetRequest_OneofSizer, []interface{}{
		(*NRFProfileGetRequest_NrfInstanceId)(nil),
		(*NRFProfileGetRequest_Filter)(nil),
		(*NRFProfileGetRequest_FragmentSessionId)(nil),
	}
}

func _NRFProfileGetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NRFProfileGetRequest)
	// data
	switch x := m.Data.(type) {
	case *NRFProfileGetRequest_NrfInstanceId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NrfInstanceId)
	case *NRFProfileGetRequest_Filter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Filter); err != nil {
			return err
		}
	case *NRFProfileGetRequest_FragmentSessionId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.FragmentSessionId)
	case nil:
	default:
		return fmt.Errorf("NRFProfileGetRequest.Data has unexpected type %T", x)
	}
	return nil
}

func _NRFProfileGetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NRFProfileGetRequest)
	switch tag {
	case 1: // data.nrf_instance_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &NRFProfileGetRequest_NrfInstanceId{x}
		return true, err
	case 2: // data.filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NRFProfileFilter)
		err := b.DecodeMessage(msg)
		m.Data = &NRFProfileGetRequest_Filter{msg}
		return true, err
	case 3: // data.fragment_session_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &NRFProfileGetRequest_FragmentSessionId{x}
		return true, err
	default:
		return false, nil
	}
}

func _NRFProfileGetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NRFProfileGetRequest)
	// data
	switch x := m.Data.(type) {
	case *NRFProfileGetRequest_NrfInstanceId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.NrfInstanceId)))
		n += len(x.NrfInstanceId)
	case *NRFProfileGetRequest_Filter:
		s := proto.Size(x.Filter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NRFProfileGetRequest_FragmentSessionId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.FragmentSessionId)))
		n += len(x.FragmentSessionId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NRFProfileGetRequest)(nil), "grpc.NRFProfileGetRequest")
}

func init() {
	proto.RegisterFile("nfmessage/nrfprofile/NRFProfileGetRequest.proto", fileDescriptor_NRFProfileGetRequest_7fb819752d4d985f)
}

var fileDescriptor_NRFProfileGetRequest_7fb819752d4d985f = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x14, 0x84, 0xb7, 0xba, 0x14, 0x8c, 0x88, 0x58, 0x45, 0x56, 0x4f, 0xc5, 0x53, 0x41, 0x48, 0x17,
	0xf7, 0x1f, 0xf4, 0xb0, 0x6e, 0x2f, 0xb2, 0xd4, 0x9b, 0x97, 0x92, 0x4d, 0x5e, 0x4a, 0x60, 0xfb,
	0x52, 0xdf, 0x8b, 0xa0, 0xff, 0xc9, 0x1f, 0x29, 0xdd, 0x56, 0x05, 0x29, 0x78, 0x0b, 0x99, 0xcc,
	0x37, 0x99, 0x11, 0x39, 0xda, 0x16, 0x98, 0x55, 0x03, 0x39, 0x92, 0xed, 0xc8, 0x5b, 0xb7, 0x87,
	0xfc, 0xa9, 0x5a, 0x6f, 0x87, 0xe3, 0x23, 0x84, 0x0a, 0x5e, 0xdf, 0x80, 0x83, 0xec, 0xc8, 0x07,
	0x9f, 0xcc, 0x1b, 0xea, 0xf4, 0xed, 0xfd, 0x3f, 0xb6, 0xb5, 0xdb, 0x07, 0xa0, 0xc1, 0x72, 0xf7,
	0x19, 0x89, 0xab, 0x29, 0x62, 0x92, 0x89, 0x73, 0x24, 0x5b, 0x3b, 0xe4, 0xa0, 0x50, 0x43, 0xed,
	0xcc, 0x22, 0x4a, 0xa3, 0xec, 0x64, 0x33, 0xab, 0xce, 0x90, 0x6c, 0x39, 0xde, 0x97, 0x26, 0x59,
	0x8a, 0xd8, 0x1e, 0x90, 0x8b, 0xa3, 0x34, 0xca, 0x4e, 0x1f, 0xae, 0x65, 0xff, 0x0d, 0xf9, 0x37,
	0x70, 0x33, 0xab, 0xc6, 0x77, 0xc9, 0x52, 0x5c, 0x5a, 0x52, 0x4d, 0x0b, 0x18, 0x6a, 0x06, 0x66,
	0xe7, 0xb1, 0xe7, 0x1f, 0x8f, 0xfc, 0x8b, 0x6f, 0xf1, 0x79, 0xd0, 0x4a, 0x53, 0xc4, 0x62, 0x6e,
	0x54, 0x50, 0x05, 0x89, 0x15, 0x90, 0xd3, 0xcc, 0x1e, 0xa5, 0xf6, 0x04, 0x12, 0xc9, 0x4a, 0xb3,
	0xeb, 0xc8, 0xbf, 0x7f, 0x0c, 0xb1, 0x3f, 0xe5, 0xe5, 0x6f, 0xf9, 0xe2, 0x66, 0xaa, 0xe2, 0xb6,
	0x1f, 0xe0, 0x25, 0xd5, 0xbe, 0xcd, 0x47, 0xc2, 0xe4, 0xe0, 0xbb, 0xf8, 0xb0, 0xd4, 0xea, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x64, 0x98, 0xe2, 0xe6, 0x8f, 0x01, 0x00, 0x00,
}
