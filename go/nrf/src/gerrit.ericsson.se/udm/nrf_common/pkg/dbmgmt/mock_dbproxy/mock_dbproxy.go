// Code generated by MockGen. DO NOT EDIT.
// Source: NFDataManagementService.pb.go

// Package mock_dbproxy is a generated GoMock package.
package mock_dbproxy

import (
	"com/dbproxy"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisNFMessage_Data is a mock of isNFMessage_Data interface
type MockisNFMessage_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisNFMessage_DataMockRecorder
}

// MockisNFMessage_DataMockRecorder is the mock recorder for MockisNFMessage_Data
type MockisNFMessage_DataMockRecorder struct {
	mock *MockisNFMessage_Data
}

// NewMockisNFMessage_Data creates a new mock instance
func NewMockisNFMessage_Data(ctrl *gomock.Controller) *MockisNFMessage_Data {
	mock := &MockisNFMessage_Data{ctrl: ctrl}
	mock.recorder = &MockisNFMessage_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNFMessage_Data) EXPECT() *MockisNFMessage_DataMockRecorder {
	return m.recorder
}

// isNFMessage_Data mocks base method
func (m *MockisNFMessage_Data) isNFMessage_Data() {
	m.ctrl.Call(m, "isNFMessage_Data")
}

// isNFMessage_Data indicates an expected call of isNFMessage_Data
func (mr *MockisNFMessage_DataMockRecorder) isNFMessage_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNFMessage_Data", reflect.TypeOf((*MockisNFMessage_Data)(nil).isNFMessage_Data))
}

// MockisNFRequest_Data is a mock of isNFRequest_Data interface
type MockisNFRequest_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisNFRequest_DataMockRecorder
}

// MockisNFRequest_DataMockRecorder is the mock recorder for MockisNFRequest_Data
type MockisNFRequest_DataMockRecorder struct {
	mock *MockisNFRequest_Data
}

// NewMockisNFRequest_Data creates a new mock instance
func NewMockisNFRequest_Data(ctrl *gomock.Controller) *MockisNFRequest_Data {
	mock := &MockisNFRequest_Data{ctrl: ctrl}
	mock.recorder = &MockisNFRequest_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNFRequest_Data) EXPECT() *MockisNFRequest_DataMockRecorder {
	return m.recorder
}

// isNFRequest_Data mocks base method
func (m *MockisNFRequest_Data) isNFRequest_Data() {
	m.ctrl.Call(m, "isNFRequest_Data")
}

// isNFRequest_Data indicates an expected call of isNFRequest_Data
func (mr *MockisNFRequest_DataMockRecorder) isNFRequest_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNFRequest_Data", reflect.TypeOf((*MockisNFRequest_Data)(nil).isNFRequest_Data))
}

// MockisPutRequest_Data is a mock of isPutRequest_Data interface
type MockisPutRequest_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisPutRequest_DataMockRecorder
}

// MockisPutRequest_DataMockRecorder is the mock recorder for MockisPutRequest_Data
type MockisPutRequest_DataMockRecorder struct {
	mock *MockisPutRequest_Data
}

// NewMockisPutRequest_Data creates a new mock instance
func NewMockisPutRequest_Data(ctrl *gomock.Controller) *MockisPutRequest_Data {
	mock := &MockisPutRequest_Data{ctrl: ctrl}
	mock.recorder = &MockisPutRequest_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisPutRequest_Data) EXPECT() *MockisPutRequest_DataMockRecorder {
	return m.recorder
}

// isPutRequest_Data mocks base method
func (m *MockisPutRequest_Data) isPutRequest_Data() {
	m.ctrl.Call(m, "isPutRequest_Data")
}

// isPutRequest_Data indicates an expected call of isPutRequest_Data
func (mr *MockisPutRequest_DataMockRecorder) isPutRequest_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPutRequest_Data", reflect.TypeOf((*MockisPutRequest_Data)(nil).isPutRequest_Data))
}

// MockisGetRequest_Data is a mock of isGetRequest_Data interface
type MockisGetRequest_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisGetRequest_DataMockRecorder
}

// MockisGetRequest_DataMockRecorder is the mock recorder for MockisGetRequest_Data
type MockisGetRequest_DataMockRecorder struct {
	mock *MockisGetRequest_Data
}

// NewMockisGetRequest_Data creates a new mock instance
func NewMockisGetRequest_Data(ctrl *gomock.Controller) *MockisGetRequest_Data {
	mock := &MockisGetRequest_Data{ctrl: ctrl}
	mock.recorder = &MockisGetRequest_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetRequest_Data) EXPECT() *MockisGetRequest_DataMockRecorder {
	return m.recorder
}

// isGetRequest_Data mocks base method
func (m *MockisGetRequest_Data) isGetRequest_Data() {
	m.ctrl.Call(m, "isGetRequest_Data")
}

// isGetRequest_Data indicates an expected call of isGetRequest_Data
func (mr *MockisGetRequest_DataMockRecorder) isGetRequest_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetRequest_Data", reflect.TypeOf((*MockisGetRequest_Data)(nil).isGetRequest_Data))
}

// MockisDelRequest_Data is a mock of isDelRequest_Data interface
type MockisDelRequest_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisDelRequest_DataMockRecorder
}

// MockisDelRequest_DataMockRecorder is the mock recorder for MockisDelRequest_Data
type MockisDelRequest_DataMockRecorder struct {
	mock *MockisDelRequest_Data
}

// NewMockisDelRequest_Data creates a new mock instance
func NewMockisDelRequest_Data(ctrl *gomock.Controller) *MockisDelRequest_Data {
	mock := &MockisDelRequest_Data{ctrl: ctrl}
	mock.recorder = &MockisDelRequest_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisDelRequest_Data) EXPECT() *MockisDelRequest_DataMockRecorder {
	return m.recorder
}

// isDelRequest_Data mocks base method
func (m *MockisDelRequest_Data) isDelRequest_Data() {
	m.ctrl.Call(m, "isDelRequest_Data")
}

// isDelRequest_Data indicates an expected call of isDelRequest_Data
func (mr *MockisDelRequest_DataMockRecorder) isDelRequest_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDelRequest_Data", reflect.TypeOf((*MockisDelRequest_Data)(nil).isDelRequest_Data))
}

// MockisNFResponse_Data is a mock of isNFResponse_Data interface
type MockisNFResponse_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisNFResponse_DataMockRecorder
}

// MockisNFResponse_DataMockRecorder is the mock recorder for MockisNFResponse_Data
type MockisNFResponse_DataMockRecorder struct {
	mock *MockisNFResponse_Data
}

// NewMockisNFResponse_Data creates a new mock instance
func NewMockisNFResponse_Data(ctrl *gomock.Controller) *MockisNFResponse_Data {
	mock := &MockisNFResponse_Data{ctrl: ctrl}
	mock.recorder = &MockisNFResponse_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNFResponse_Data) EXPECT() *MockisNFResponse_DataMockRecorder {
	return m.recorder
}

// isNFResponse_Data mocks base method
func (m *MockisNFResponse_Data) isNFResponse_Data() {
	m.ctrl.Call(m, "isNFResponse_Data")
}

// isNFResponse_Data indicates an expected call of isNFResponse_Data
func (mr *MockisNFResponse_DataMockRecorder) isNFResponse_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNFResponse_Data", reflect.TypeOf((*MockisNFResponse_Data)(nil).isNFResponse_Data))
}

// MockisPutResponse_Data is a mock of isPutResponse_Data interface
type MockisPutResponse_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisPutResponse_DataMockRecorder
}

// MockisPutResponse_DataMockRecorder is the mock recorder for MockisPutResponse_Data
type MockisPutResponse_DataMockRecorder struct {
	mock *MockisPutResponse_Data
}

// NewMockisPutResponse_Data creates a new mock instance
func NewMockisPutResponse_Data(ctrl *gomock.Controller) *MockisPutResponse_Data {
	mock := &MockisPutResponse_Data{ctrl: ctrl}
	mock.recorder = &MockisPutResponse_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisPutResponse_Data) EXPECT() *MockisPutResponse_DataMockRecorder {
	return m.recorder
}

// isPutResponse_Data mocks base method
func (m *MockisPutResponse_Data) isPutResponse_Data() {
	m.ctrl.Call(m, "isPutResponse_Data")
}

// isPutResponse_Data indicates an expected call of isPutResponse_Data
func (mr *MockisPutResponse_DataMockRecorder) isPutResponse_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPutResponse_Data", reflect.TypeOf((*MockisPutResponse_Data)(nil).isPutResponse_Data))
}

// MockisGetResponse_Data is a mock of isGetResponse_Data interface
type MockisGetResponse_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisGetResponse_DataMockRecorder
}

// MockisGetResponse_DataMockRecorder is the mock recorder for MockisGetResponse_Data
type MockisGetResponse_DataMockRecorder struct {
	mock *MockisGetResponse_Data
}

// NewMockisGetResponse_Data creates a new mock instance
func NewMockisGetResponse_Data(ctrl *gomock.Controller) *MockisGetResponse_Data {
	mock := &MockisGetResponse_Data{ctrl: ctrl}
	mock.recorder = &MockisGetResponse_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetResponse_Data) EXPECT() *MockisGetResponse_DataMockRecorder {
	return m.recorder
}

// isGetResponse_Data mocks base method
func (m *MockisGetResponse_Data) isGetResponse_Data() {
	m.ctrl.Call(m, "isGetResponse_Data")
}

// isGetResponse_Data indicates an expected call of isGetResponse_Data
func (mr *MockisGetResponse_DataMockRecorder) isGetResponse_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetResponse_Data", reflect.TypeOf((*MockisGetResponse_Data)(nil).isGetResponse_Data))
}

// MockisDelResponse_Data is a mock of isDelResponse_Data interface
type MockisDelResponse_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisDelResponse_DataMockRecorder
}

// MockisDelResponse_DataMockRecorder is the mock recorder for MockisDelResponse_Data
type MockisDelResponse_DataMockRecorder struct {
	mock *MockisDelResponse_Data
}

// NewMockisDelResponse_Data creates a new mock instance
func NewMockisDelResponse_Data(ctrl *gomock.Controller) *MockisDelResponse_Data {
	mock := &MockisDelResponse_Data{ctrl: ctrl}
	mock.recorder = &MockisDelResponse_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisDelResponse_Data) EXPECT() *MockisDelResponse_DataMockRecorder {
	return m.recorder
}

// isDelResponse_Data mocks base method
func (m *MockisDelResponse_Data) isDelResponse_Data() {
	m.ctrl.Call(m, "isDelResponse_Data")
}

// isDelResponse_Data indicates an expected call of isDelResponse_Data
func (mr *MockisDelResponse_DataMockRecorder) isDelResponse_Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDelResponse_Data", reflect.TypeOf((*MockisDelResponse_Data)(nil).isDelResponse_Data))
}

// MockNFDataManagementServiceClient is a mock of NFDataManagementServiceClient interface
type MockNFDataManagementServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNFDataManagementServiceClientMockRecorder
}

// MockNFDataManagementServiceClientMockRecorder is the mock recorder for MockNFDataManagementServiceClient
type MockNFDataManagementServiceClientMockRecorder struct {
	mock *MockNFDataManagementServiceClient
}

// NewMockNFDataManagementServiceClient creates a new mock instance
func NewMockNFDataManagementServiceClient(ctrl *gomock.Controller) *MockNFDataManagementServiceClient {
	mock := &MockNFDataManagementServiceClient{ctrl: ctrl}
	mock.recorder = &MockNFDataManagementServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNFDataManagementServiceClient) EXPECT() *MockNFDataManagementServiceClientMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockNFDataManagementServiceClient) Execute(ctx context.Context, in *dbproxy.NFMessage, opts ...grpc.CallOption) (*dbproxy.NFMessage, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*dbproxy.NFMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execte  mocks base method
func (m *MockNFDataManagementServiceClient) TransferParameter(ctx context.Context, in *dbproxy.ParaRequest, opts ...grpc.CallOption) (*dbproxy.ParaResponse, error) {
        return nil, nil
}
// Execute mocks base method
func (m *MockNFDataManagementServiceClient) Insert(ctx context.Context, in *dbproxy.InsertRequest, opts ...grpc.CallOption) (*dbproxy.InsertResponse, error) {
	return nil, nil
}

// Execute mocks base method
func (m *MockNFDataManagementServiceClient) Remove(ctx context.Context, in *dbproxy.RemoveRequest, opts ...grpc.CallOption) (*dbproxy.RemoveResponse, error) {
	return nil, nil
}

// Execute mocks base method
func (m *MockNFDataManagementServiceClient) QueryByKey(ctx context.Context, in *dbproxy.QueryRequest, opts ...grpc.CallOption) (dbproxy.NFDataManagementService_QueryByKeyClient, error) {
	return nil, nil
}

// Execute mocks base method
func (m *MockNFDataManagementServiceClient) QueryByFilter(ctx context.Context, in *dbproxy.QueryRequest, opts ...grpc.CallOption) (dbproxy.NFDataManagementService_QueryByFilterClient, error) {
	return nil, nil
}

// Execute indicates an expected call of Execute
func (mr *MockNFDataManagementServiceClientMockRecorder) Execute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNFDataManagementServiceClient)(nil).Execute), varargs...)
}

// MockNFDataManagementServiceServer is a mock of NFDataManagementServiceServer interface
type MockNFDataManagementServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNFDataManagementServiceServerMockRecorder
}

// MockNFDataManagementServiceServerMockRecorder is the mock recorder for MockNFDataManagementServiceServer
type MockNFDataManagementServiceServerMockRecorder struct {
	mock *MockNFDataManagementServiceServer
}

// NewMockNFDataManagementServiceServer creates a new mock instance
func NewMockNFDataManagementServiceServer(ctrl *gomock.Controller) *MockNFDataManagementServiceServer {
	mock := &MockNFDataManagementServiceServer{ctrl: ctrl}
	mock.recorder = &MockNFDataManagementServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNFDataManagementServiceServer) EXPECT() *MockNFDataManagementServiceServerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockNFDataManagementServiceServer) Execute(arg0 context.Context, arg1 *dbproxy.NFMessage) (*dbproxy.NFMessage, error) {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*dbproxy.NFMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockNFDataManagementServiceServerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNFDataManagementServiceServer)(nil).Execute), arg0, arg1)
}
